name: Add Supabase Secret

on:
  pull_request:
    types: [opened]
    branches:
      - main 

jobs:
  add-secret:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install dotenvx
        run: curl -sfS https://dotenvx.sh/install.sh | sh

      - name: Decrypt .env.preview
        run: dotenvx decrypt --env-file=supabase/functions/.env.preview
        env:
          DOTENV_PRIVATE_KEY_PREVIEW: ${{ secrets.DOTENV_PRIVATE_KEY_PREVIEW }}

      - name: Set Supabase Edge Function secrets from .env.preview
        run: |
          branch_name="${{ github.head_ref }}"
          echo "Detected new branch: $branch_name"

          max_attempts=10
          attempt=1
          branch_id=""

          # Retry loop to wait for the preview branch to be available
          while [[ -z "$branch_id" && $attempt -le $max_attempts ]]; do
            echo "Attempt $attempt: Checking for Supabase preview branch..."
            branch_id=$(supabase branches list --project-ref "$PROJECT_REF" --experimental | grep "$branch_name" | awk -F '|' '{gsub(/^[ \t]+|[ \t]+$/, "", $1); print $1}')
            if [[ -z "$branch_id" ]]; then
              echo "Branch not ready yet. Retrying in 30 seconds..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done

          if [[ -z "$branch_id" ]]; then
            echo "Failed to find Supabase preview branch for: $branch_name"
            exit 1
          fi
          echo "Found branch_id: $branch_id"

          # Get the preview project ref
          project_ref=$(supabase branches get "$branch_id" --project-ref "$PROJECT_REF" --experimental | awk '/supabase.co/ { split($1, parts, "."); print parts[2] }')
          echo "Using project_ref: $project_ref"

          # Set secrets using the extracted project_ref
          supabase secrets set --env-file supabase/functions/.env.preview --project-ref "$project_ref"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROJECT_REF: ${{ secrets.PROJECT_REF }}
          